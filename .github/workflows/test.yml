name: CI Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

env:
  NODE_ENV: test

jobs:
  test:
    name: Test Node ${{ matrix.node }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20, 22]
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better coverage reporting

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck || npx tsc --noEmit

      - name: Run tests with coverage
        run: npm run test:ci
        env:
          CI: true
          FORCE_COLOR: 1

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node == 20
        uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-plato
          fail_ci_if_error: false
          verbose: true

  coverage-check:
    name: Coverage Check
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Check coverage thresholds
        run: |
          COVERAGE=$(npx jest --coverage --coverageReporters=json-summary | grep -oP '(?<=lines":\{"total":)\d+' || echo "0")
          echo "Coverage: $COVERAGE%"
          if [ "$COVERAGE" -lt 80 ]; then
            echo "‚ùå Coverage is below 80% threshold"
            exit 1
          else
            echo "‚úÖ Coverage meets minimum threshold"
          fi

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            
            const comment = `## üìä Coverage Report
            
            | Type | Coverage |
            |------|----------|
            | Lines | ${total.lines.pct}% |
            | Statements | ${total.statements.pct}% |
            | Functions | ${total.functions.pct}% |
            | Branches | ${total.branches.pct}% |
            
            ${total.lines.pct >= 80 ? '‚úÖ' : '‚ùå'} Minimum coverage threshold: 80%`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Measure test performance
        run: |
          START_TIME=$(date +%s)
          npm test
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          
          echo "Test suite duration: ${DURATION} seconds"
          
          if [ "$DURATION" -gt 60 ]; then
            echo "‚ö†Ô∏è Test suite took longer than 60 seconds (${DURATION}s)"
            exit 1
          else
            echo "‚úÖ Test suite completed within 60 seconds"
          fi

  all-checks-passed:
    name: All Checks Passed
    needs: [test, coverage-check, performance-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Verify all checks passed
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.coverage-check.result }}" != "success" ] || \
             [ "${{ needs.performance-check.result }}" != "success" ]; then
            echo "‚ùå Some checks failed"
            exit 1
          else
            echo "‚úÖ All CI checks passed successfully"
          fi